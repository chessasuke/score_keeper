# name: Build Release App Bundle

# on: push

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Decode Keystore
#         id: decode_keystore
#         uses: timheuer/base64-to-file@v1
#         with:
#           fileName: 'keystore/your_signing_keystore.jks'
#           encodedString: ${{ secrets.KEYSTORE }}
#       - uses: actions/checkout@v2
      # - name: set up JDK 1.8
      #   uses: actions/setup-java@v1
      #   with:
      #     java-version: 1.8
      # - name: Make gradlew executable
      #   run: chmod +x ./gradlew
      # - name: build prod
      #   run: ./gradlew app:bundleRelease
      #   env:
      #     SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
      #     SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
      #     SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}
      # - name: Upload
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: Build Artifacts
      #     path: app/build/outputs/


name: Build App Bundle
on: push
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: '12.x'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.0.5'
          channel: 'stable'

      - name: Download Android keystore
        id: android_keystore
        uses: timheuer/base64-to-file@v1.0.3
        with:
          fileName: key.jks
          encodedString: ${{ secrets.KEYSTORE }}

      # - name: Get Android Keystore
      #   env:
      #       ENCODED_KEYSTORE: ${{ secrets.KEYSTORE }}
      #   run: |
      #       TMP_KEYSTORE_FILE_PATH="${RUNNER_TEMP}"/keystore
      #       mkdir "${TMP_KEYSTORE_FILE_PATH}"
      #       echo $ENCODED_KEYSTORE | base64 -di > "${TMP_KEYSTORE_FILE_PATH}"/your_keystore_file.jks

      - name: Create key.properties
        run: |
          echo "storeFile=${{ steps.android_keystore.outputs.filePath }}" > android/key.properties
          echo "storePassword=${{ secrets.SIGNING_STORE_PASSWORD }}" >> android/key.properties
          echo "keyPassword=${{ secrets.SIGNING_KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.SIGNING_KEY_ALIAS }}" >> android/key.properties

      - name: Build Android App Bundle
        run: flutter build appbundle

      # Make appbundle downloadable
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: appbundle
          path: build/app/outputs/bundle/release

      # - name: set up JDK 1.8
      #   uses: actions/setup-java@v1
      #   with:
      #     java-version: 1.8
      # - name: Make gradlew executable
      #   run: chmod +x ./gradlew
      # - name: build prod
      #   run: ./gradlew app:bundleRelease
      #   env:
      #     SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
      #     SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
      #     SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}


#   #       git fetch --prune --depth=10000
#   #   - name: Install GitVersion
#   #     uses: gittools/actions/gitversion/setup@v0.9.3
#   #     with:
#   #         versionSpec: '5.2.x'
#   #   - name: Use GitVersion
#   #     id: gitversion
#   #     uses: gittools/actions/gitversion/execute@v0.9.3
#   #   - name: Create version.txt with nuGetVersion
#   #     run: echo ${{ steps.gitversion.outputs.nuGetVersion  }} > version.txt
#   #   - name: Upload version.txt
#   #     uses: actions/upload-artifact@v2
#   #     with:
#   #       name: gitversion
#   #       path: version.txt
#   build:
#     name: Build APK and Create release
#     # needs: [ version ]
#     runs-on: ubuntu-latest
#     steps:
#     - uses: actions/checkout@v1
#     # - name: Get version.txt
#     #   uses: actions/download-artifact@v2
#     #   with:
#     #     name: gitversion
#     # - name: Create new file without newline char from version.txt
#     #   run: tr -d '\n' < version.txt > version1.txt
#     # - name: Read version
#     #   id: version
#     #   uses: juliangruber/read-file-action@v1
#     #   with:
#     #     path: version1.txt
#     # - name: Update version in YAML
#     #   run: sed -i 's/99.99.99+99/${{ steps.version.outputs.content }}+${{ github.run_number }}/g' pubspec.yaml
#     - name: Update KeyStore password in gradle properties
#       run: sed -i 's/#{KEYSTORE_PASS}#/${{ secrets.KEYSTORE_PASS }}/g' android/key.properties
#     - name: Update KeyStore key password in gradle properties
#       run: sed -i 's/#{KEYSTORE_KEY_PASS}#/${{ secrets.KEYSTORE_KEY_PASS }}/g' android/key.properties
#     - uses: actions/setup-java@v1
#       with:
#         java-version: '12.x'
#     - uses: subosito/flutter-action@v1
#       with:
#         flutter-version: '3.0.5'
#     - run: flutter pub get
#     # - run: flutter test
#     - run: flutter build apk --release --split-per-abi
#     - run: flutter build appbundle
#     # - name: Create a Release in GitHub
#     #   uses: ncipollo/release-action@v1
#     #   with:
#     #     artifacts: "build/app/outputs/apk/release/*.apk,build/app/outputs/bundle/release/app-release.aab"
#     #     token: ${{ secrets.GH_TOKEN }}
#     #     tag: ${{ steps.version.outputs.content }}
#     #     commit: ${{ github.sha }}
#   #   - name: Upload app bundle
#   #     uses: actions/upload-artifact@v2
#   #     with:
#   #       name: appbundle
#   #       path: build/app/outputs/bundle/release/app-release.aab
#   # release:
#   #   name: Release app to internal track
#   #   needs: [ build ]
#   #   runs-on: ubuntu-latest
#   #   steps:
#   #   - uses: actions/checkout@v1
#   #   - name: Get appbundle from artifacts
#   #     uses: actions/download-artifact@v2
#   #     with:
#   #       name: appbundle
#   #   - name: Release app to internal track
#   #     uses: r0adkll/upload-google-play@v1
#   #     with:
#   #       serviceAccountJsonPlainText: ${{ secrets.PLAYSTORE_ACCOUNT_KEY }}
#   #       packageName: com.fluttercicddemo
#   #       releaseFile: app-release.aab
#   #       track: internal
#   #       whatsNewDirectory: distribution/whatsnew


# # name: Flutter_Android

# # on:
#   # push:
#   #   branches: [master]
#   # pull_request:
#   #   branches: [master]

# # on: push
# # name: Release app bundle

# # jobs:
# #   build_android:
# #     runs-on: ubuntu-latest

# #     steps:
# #       - uses: actions/checkout@v3
# #       - uses: actions/setup-java@v1
# #         with:
# #           java-version: '12.x'
# #       - uses: subosito/flutter-action@v2
# #         with:
# #           flutter-version: '3.0.5'
# #           channel: 'stable'

# #       - name: Decode keystore and create jks and properties file for signing the app
# #         env:
# #           PLAY_STORE_UPLOAD_KEY: ${{ secrets.PLAY_STORE_UPLOAD_KEY }}
# #           KEYSTORE_KEY_ALIAS: ${{ secrets.KEYSTORE_KEY_ALIAS }}
# #           KEYSTORE_KEY_PASSWORD: ${{ secrets.KEYSTORE_KEY_PASSWORD }}
# #           KEYSTORE_STORE_PASSWORD: ${{ secrets.KEYSTORE_STORE_PASSWORD }}
# #         working-directory: android
# #         run: |
# #           echo "$PLAY_STORE_UPLOAD_KEY" | base64 --decode > app/keystore.jks
# #           echo "storeFile=keystore.jks" >> key.properties
# #           echo "keyAlias=$KEYSTORE_KEY_ALIAS" >> key.properties
# #           echo "storePassword=$KEYSTORE_STORE_PASSWORD" >> key.properties
# #           echo "keyPassword=$KEYSTORE_KEY_PASSWORD" >> key.properties

#       # - name: Create the Keystore
#       #   env:
#       #     KEYSTORE_BASE64: ${{ secrets.SCORE_KEEPER_KEYSTORE }}
#       #   run: |
#       #     # import keystore from secrets
#       #     echo $KEYSTORE_BASE64 | base64 -d > $RUNNER_TEMP/my_production.keystore

#       # - run: flutter pub get
#       # - run: flutter build appbundle --release

#       # - name: Sign Android App Bundle
#       #   run: jarsigner -keystore $RUNNER_TEMP/my_production.keystore -storepass ${{ secrets.SCORE_KEEPER_PARAPHRASE }} -keypass ${{ secrets.SCORE_KEEPER_PARAPHRASE }} -sigalg SHA256withRSA -digestalg SHA-256 -signedjar build/app/outputs/bundle/release/app-release-signed.aab build/app/outputs/bundle/release/*.aab my_production_alias

#       # - name: Publish Android Artefacts
#       #   uses: actions/upload-artifact@v1
#       #   with:
#       #     name: release-aab-signed
#       #     path: build/app/outputs/bundle/release/app-release-signed.aab

